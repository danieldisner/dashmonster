#!/bin/sh

echo "üöÄ [INIT] Inicializando banco de dados..."

# Aguardar PostgreSQL estar pronto
echo "‚è≥ [INIT] Aguardando PostgreSQL estar pronto..."
max_attempts=30
attempt=1

until pg_isready -h postgres -U dashmonster_user -d dashmonster_db -q; do
  if [ $attempt -eq $max_attempts ]; then
    echo "‚ùå [INIT] PostgreSQL n√£o ficou pronto ap√≥s $max_attempts tentativas"
    exit 1
  fi
  echo "üîÑ [INIT] Tentativa $attempt/$max_attempts - PostgreSQL ainda n√£o est√° pronto..."
  sleep 3
  attempt=$((attempt + 1))
done

echo "‚úÖ [INIT] PostgreSQL est√° pronto!"

# Gerar Prisma client primeiro (pode falhar por permiss√µes, mas continuamos)
echo "üîß [INIT] Gerando Prisma client..."
npx prisma generate --schema=./prisma/schema.prisma 2>/dev/null || echo "‚ö†Ô∏è [INIT] Aviso: Problema ao gerar client, mas continuando..."

# SEMPRE aplicar o schema para garantir que as tabelas sejam criadas
echo "üìä [INIT] For√ßando cria√ß√£o das tabelas do banco..."
if [ "$NODE_ENV" = "production" ]; then
  echo "üöÄ [INIT] Aplicando migrations (produ√ß√£o)..."
  npx prisma migrate deploy
else
  echo "üõ†Ô∏è [INIT] Aplicando schema (desenvolvimento)..."
  npx prisma db push --accept-data-loss --force-reset
fi

# Verificar se as tabelas foram realmente criadas
echo "üîç [INIT] Verificando se as tabelas foram criadas..."
TABLES_CHECK=$(npx prisma db execute --stdin <<'EOF' 2>/dev/null || echo "0"
SELECT COUNT(*) 
FROM information_schema.tables 
WHERE table_schema = 'public' 
AND table_name IN ('users', 'organizations');
EOF
)

echo "üìä [INIT] Tabelas encontradas: $TABLES_CHECK"

if [ "$TABLES_CHECK" = "0" ] || [ -z "$TABLES_CHECK" ]; then
  echo "‚ùå [INIT] ERRO: Tabelas n√£o foram criadas! Tentando novamente..."
  npx prisma db push --force-reset --accept-data-loss
  sleep 2
fi

# Verificar quantos usu√°rios existem e fazer seed se necess√°rio
echo "üå± [INIT] Verificando dados iniciais..."
USER_COUNT=$(npx prisma db execute --stdin <<'EOF' 2>/dev/null | tail -n 1 || echo "0"
SELECT COUNT(*) FROM users;
EOF
)

echo "üë• [INIT] Usu√°rios encontrados: $USER_COUNT"

if [ "$USER_COUNT" = "0" ] || [ -z "$USER_COUNT" ]; then
  echo "üìù [INIT] Banco vazio. Executando seed completo..."
  
  # Executar o seed TypeScript
  if npm run db:seed; then
    echo "‚úÖ [INIT] Seed executado com sucesso!"
  else
    echo "‚ö†Ô∏è [INIT] Erro no seed, tentando criar dados b√°sicos via SQL..."
    
    # Fallback: criar usu√°rio admin diretamente via SQL se seed falhar
    npx prisma db execute --stdin <<'EOF' || echo "‚ö†Ô∏è [INIT] Erro ao inserir admin, mas continuando..."
INSERT INTO organizations (id, name, code, type, address, contact, settings, "isActive", "createdAt", "updatedAt")
VALUES ('550e8400-e29b-41d4-a716-446655440000', 'Escola Municipal Dom Pedro II', 'EMDP2', 'SCHOOL', '{}', '{}', '{}', true, NOW(), NOW())
ON CONFLICT (id) DO NOTHING;

INSERT INTO users (id, email, password, name, cpf, phone, role, "organizationId", "isActive", "createdAt", "updatedAt")
VALUES ('550e8400-e29b-41d4-a716-446655440001', 'admin@dashmonster.com', '$2a$10$vRjr4hoaxpH/lzafRTWvLeXVItU1L5mw.1RcBlRzswDC9W2kvk1Vu', 'Administrador', '12345678901', '11999999999', 'ADMIN', '550e8400-e29b-41d4-a716-446655440000', true, NOW(), NOW())
ON CONFLICT (email) DO NOTHING;
EOF

    echo "‚úÖ [INIT] Dados b√°sicos criados como fallback!"
  fi
else
  echo "‚úÖ [INIT] Banco j√° possui $USER_COUNT usu√°rios"
fi

echo "üéâ [INIT] Inicializa√ß√£o do banco conclu√≠da com sucesso!"

# Iniciar aplica√ß√£o
echo "üöÄ [INIT] Iniciando aplica√ß√£o..."
exec "$@"
