#!/usr/bin/env pwshparam(    [Parameter(Mandatory = $true)]    [ValidateSet("dev", "prod", "build", "clean", "test", "setup")]    [string]$Command,        [switch]$Rebuild,    [switch]$Logs,    [switch]$Detach)# Colors for output$ErrorColor = "Red"$SuccessColor = "Green"$InfoColor = "Cyan"$WarningColor = "Yellow"function Write-ColorOutput {    param($Message, $Color = "White")    Write-Host $Message -ForegroundColor $Color}function Show-Header {    Write-ColorOutput "  Dashmonster System Manager" $InfoColor    Write-ColorOutput "=========================" $InfoColor}function Test-Prerequisites {    Write-ColorOutput "üîç Checking prerequisites..." $InfoColor        # Check Docker    try {        $dockerVersion = docker --version        Write-ColorOutput "‚úÖ Docker: $dockerVersion" $SuccessColor    }    catch {        Write-ColorOutput "‚ùå Docker not found. Please install Docker Desktop." $ErrorColor        exit 1    }        # Check Docker Compose    try {        $composeVersion = docker-compose --version        Write-ColorOutput "‚úÖ Docker Compose: $composeVersion" $SuccessColor    }    catch {        Write-ColorOutput "‚ùå Docker Compose not found." $ErrorColor        exit 1    }        # Check Node.js (for local development)    try {        $nodeVersion = node --version        Write-ColorOutput "‚úÖ Node.js: $nodeVersion" $SuccessColor    }    catch {        Write-ColorOutput "‚ö†Ô∏è  Node.js not found (OK for Docker-only setup)" $WarningColor    }}function Start-Development {    Write-ColorOutput "üöÄ Starting development environment..." $InfoColor        if ($Rebuild) {        Write-ColorOutput "üî® Rebuilding containers..." $InfoColor        docker-compose -f docker-compose.dev.yml down -v        docker-compose -f docker-compose.dev.yml build --no-cache    }        $composeArgs = @("-f", "docker-compose.dev.yml", "up")    if ($Detach) { $composeArgs += "-d" }        & docker-compose @composeArgs        if ($Detach) {        Write-ColorOutput "‚úÖ Development environment started!" $SuccessColor        Write-ColorOutput "üåê Frontend: http://localhost:3000" $InfoColor        Write-ColorOutput "üîó Backend: http://localhost:4000" $InfoColor        Write-ColorOutput "üóÑÔ∏è  Database: localhost:5432" $InfoColor        Write-ColorOutput ""        Write-ColorOutput "üìã Useful commands:" $InfoColor        Write-ColorOutput "  .\dashmonster.ps1 dev -Logs     # View logs" $InfoColor        Write-ColorOutput "  .\dashmonster.ps1 clean         # Stop and clean" $InfoColor    }}function Start-Production {    Write-ColorOutput "üè≠ Starting production environment..." $InfoColor        if ($Rebuild) {        Write-ColorOutput "üî® Rebuilding containers..." $InfoColor        docker-compose -f docker-compose.prod.yml down -v        docker-compose -f docker-compose.prod.yml build --no-cache    }        $composeArgs = @("-f", "docker-compose.prod.yml", "up")    if ($Detach) { $composeArgs += "-d" }        & docker-compose @composeArgs}function Invoke-Build {    Write-ColorOutput "üî® Building project..." $InfoColor        # Build backend    Write-ColorOutput "üì¶ Building backend..." $InfoColor    docker-compose -f docker-compose.dev.yml build backend        # Build frontend    Write-ColorOutput "üé® Building frontend..." $InfoColor    docker-compose -f docker-compose.dev.yml build frontend        Write-ColorOutput "‚úÖ Build completed!" $SuccessColor}function Clear-Environment {    Write-ColorOutput "üßπ Cleaning environment..." $InfoColor        # Stop all containers    docker-compose -f docker-compose.dev.yml down -v    docker-compose -f docker-compose.prod.yml down -v    docker-compose down -v        # Remove unused images and volumes    docker system prune -f    docker volume prune -f        Write-ColorOutput "‚úÖ Environment cleaned!" $SuccessColor}function Show-Logs {    Write-ColorOutput "üìã Showing logs..." $InfoColor    docker-compose -f docker-compose.dev.yml logs -f --tail=100}function Invoke-Tests {    Write-ColorOutput "üß™ Running tests..." $InfoColor        # Frontend tests    Write-ColorOutput "Testing frontend..." $InfoColor    docker-compose -f docker-compose.dev.yml exec frontend npm run test        # Backend tests    Write-ColorOutput "Testing backend..." $InfoColor    docker-compose -f docker-compose.dev.yml exec backend npm run test}function Initialize-Project {    Write-ColorOutput "‚öôÔ∏è  Setting up project..." $InfoColor        # Create environment files if they don't exist    if (-not (Test-Path ".env.local")) {        Copy-Item ".env.local.example" ".env.local"        Write-ColorOutput "‚úÖ Created .env.local" $SuccessColor    }        if (-not (Test-Path "backend\.env")) {        Copy-Item "backend\.env.example" "backend\.env"        Write-ColorOutput "‚úÖ Created backend/.env" $SuccessColor    }        # Initialize database    Write-ColorOutput "üóÑÔ∏è  Initializing database..." $InfoColor    docker-compose -f docker-compose.dev.yml up -d postgres    Start-Sleep -Seconds 10        docker-compose -f docker-compose.dev.yml run --rm backend npx prisma db push    docker-compose -f docker-compose.dev.yml run --rm backend npm run seed        Write-ColorOutput "‚úÖ Project setup completed!" $SuccessColor}# Main executionShow-HeaderTest-Prerequisitesswitch ($Command) {    "dev" {        if ($Logs) {            Show-Logs        } else {            Start-Development        }    }    "prod" {        Start-Production    }    "build" {        Invoke-Build    }    "clean" {        Clear-Environment    }    "test" {        Invoke-Tests    }    "setup" {        Initialize-Project    }}